ISBN,書籍簡介
9781673274097,"Let's address the critical question right off the bat: why do you have to read this book? If you have a knack for software development, please do not throw this opportunity away. Now is your chance to become an expert.When reliable approaches function without domain driven design, such denial of this technology or market environment become costly. Even medium-sized mobile apps benefit immensely from the structure of the application of this amazing architecture. Too often, developers only chuck lines of code at problems that can be fixed with vital structural changes.Domain-Driven Design does a great job in incorporating industry conditions into aspects of software development. For example, this book focuses on how the accuracy of the model driven design involves constant communication in multiple occasions, and developers separated by team/locations do not participate in continual contact. Recommendations are provided on segmenting the software as a consequence of the market reality. This will enable efficient modeling across independent teams. Such approaches also take political problems within groups into consideration, as well as the collaboration of overburdened departments and legacy systems. In fact, the book points out a claim that many developers are protesting against, but this is particularly true: not all developers in a group need to pursue the same approach.The claim does not mean that developers are expected to use arbitrary solutions; it implies that programmers are not allowed to tie each other to a unique solution if they can address fundamentally different problems. Two teams working on your device may have a ""User"" category and may have a Consumer Category. But perhaps Team A wants a customer as part of the payment process, or Team B needs a customer as part of a support system. Should we use all departments in the same Customer Class? Perhaps not. Perhaps they should have Consumer-Grade billing and support. Then each Consumer includes only the actions they need for the job they have to do. Nevertheless, you will find considerable resistance to solutions like this- critics are complaining of ""unnecessary duplication,"" but in fact, it is not replication, and it is needed. Of similar reasons, the book tends to support the possibility of locking ""Bounded Context.""Furthermore, this beginner's guide is right on the money when it comes to structuring code in a manner that allows for business structure. The book also emphasizes concentration and project management in a sense that also helps teams to operate independently without the dictator and the design."
9781484245422,"See how Domain-Driven Design (DDD) combines with Jakarta EE MicroProfile or Spring Boot to offer a complete suite for building enterprise-grade applications. In this book you will see how these all come together in one of the most efficient ways to develop complex software, with a particular focus on the DDD process. Practical Domain-Driven Design in Enterprise Java starts by building out the Cargo Tracker reference application as a monolithic application using the Jakarta EE platform. By doing so, you will map concepts of DDD (bounded contexts, language, and aggregates) to the corresponding available tools (CDI, JAX-RS, and JPA) within the Jakarta EE platform. Once you have completed the monolithic application, you will walk through the complete conversion of the monolith to a microservices-based architecture, again mapping the concepts of DDD and the corresponding available tools within the MicroProfile platform (config, discovery, and fault tolerance). To finish this section, you will examine the same microservices architecture on the Spring Boot platform. The final set of chapters looks at what the application would be like if you used the CQRS and event sourcing patterns. Here you'll use the Axon framework as the base framework. What You Will LearnDiscover the DDD architectural principles and use the DDD design patternsUse the new Eclipse Jakarta EE platform Work with the Spring Boot frameworkImplement microservices design patterns, including context mapping, logic design, entities, integration, testing, and securityCarry out event sourcingApply CQRS Who This Book Is ForJunior developers intending to start working on enterprise Java; senior developers transitioning from monolithic- to microservices-based architectures; and architects transitioning to a DDD philosophy of building applications."
9781788834094,"Solve complex business problems by understanding users better, finding the right problem to solve, and building lean event-driven systems to give your customers what they really want Key Features Apply DDD principles using modern tools such as EventStorming, Event Sourcing, and CQRS Learn how DDD applies directly to various architectural styles such as REST, reactive systems, and microservices Empower teams to work flexibly with improved services and decoupled interactions Book Description Developers across the world are rapidly adopting DDD principles to deliver powerful results when writing software that deals with complex business requirements. This book will guide you in involving business stakeholders when choosing the software you are planning to build for them. By figuring out the temporal nature of behavior-driven domain models, you will be able to build leaner, more agile, and modular systems.  You'll begin by uncovering domain complexity and learn how to capture the behavioral aspects of the domain language. You will then learn about EventStorming and advance to creating a new project in .NET Core 2.1; you'll also and write some code to transfer your events from sticky notes to C#. The book will show you how to use aggregates to handle commands and produce events. As you progress, you'll get to grips with Bounded Contexts, Context Map, Event Sourcing, and CQRS. After translating domain models into executable C# code, you will create a frontend for your application using Vue.js. In addition to this, you'll learn how to refactor your code and cover event versioning and migration essentials.  By the end of this DDD book, you will have gained the confidence to implement the DDD approach in your organization and be able to explore new techniques that complement what you've learned from the book. What you will learn Discover and resolve domain complexity together with business stakeholders Avoid common pitfalls when creating the domain model Study the concept of Bounded Context and aggregate Design and build temporal models based on behavior and not only data Explore benefits and drawbacks of Event Sourcing Get acquainted with CQRS and to-the-point read models with projections Practice building one-way flow UI with Vue.js Understand how a task-based UI conforms to DDD principles"
9781787284944,0
9780134434421,"Domain-Driven Design (DDD) software modeling delivers powerful results in practice, not just in theory, which is why developers worldwide are rapidly moving to adopt it. Now, for the first time, there's an accessible guide to the basics of DDD: What it is, what problems it solves, how it works, and how to quickly gain value from it.  Concise, readable, and actionable, Domain-Driven Design Distilled never buries you in detail-it focuses on what you need to know to get results. Vaughn Vernon, author of the best-selling Implementing Domain-Driven Design,  draws on his twenty years of experience applying DDD principles to real-world situations. He is uniquely well-qualified to demystify its complexities, illuminate its subtleties, and help you solve the problems you might encounter.  Vernon guides you through each core DDD technique for building better software. You'll learn how to segregate domain models using the powerful Bounded Contexts pattern, to develop a Ubiquitous Language within an explicitly bounded context, and to help domain experts and developers work together to create that language. Vernon shows how to use Subdomains to handle legacy systems and to integrate multiple Bounded Contexts to define both team relationships and technical mechanisms.  Domain-Driven Design Distilled brings DDD to life. Whether you're a developer, architect, analyst, consultant, or customer, Vernon helps you truly understand it so you can benefit from its remarkable power.  Coverage includes   What DDD can do for you and your organization-and why it's so important   The cornerstones of strategic design with DDD: Bounded Contexts and Ubiquitous Language   Strategic design with Subdomains   Context Mapping: helping teams work together and integrate software more strategically   Tactical design with Aggregates and Domain Events   Using project acceleration and management tools to establish and maintain team cadence  "
9780321125217,"""Eric Evans has written a fantastic book on how you can make the design of your software match your mental model of the problem domain you are addressing.  ""His book is very compatible with XP. It is not about drawing pictures of a domain; it is about how you think of it, the language you use to talk about it, and how you organize your software to reflect your improving understanding of it. Eric thinks that learning about your problem domain is as likely to happen at the end of your project as at the beginning, and so refactoring is a big part of his technique.  ""The book is a fun read. Eric has lots of interesting stories, and he has a way with words. I see this book as essential reading for software developers--it is a future classic.""  --Ralph Johnson, author of Design Patterns  ""If you don't think you are getting value from your investment in object-oriented programming, this book will tell you what you've forgotten to do. ""Eric Evans convincingly argues for the importance of domain modeling as the central focus of development and provides a solid framework and set of techniques for accomplishing it. This is timeless wisdom, and will hold up long after the methodologies du jour have gone out of fashion.""  --Dave Collins, author of Designing Object-Oriented User Interfaces   ""Eric weaves real-world experience modeling--and building--business applications into a practical, useful book. Written from the perspective of a trusted practitioner, Eric's descriptions of ubiquitous language, the benefits of sharing models with users, object life-cycle management, logical and physical application structuring, and the process and results of deep refactoring are major contributions to our field.""  --Luke Hohmann, author of Beyond Software Architecture   ""This book belongs on the shelf of every thoughtful software developer."" --Kent Beck  ""What Eric has managed to capture is a part of the design process that experienced object designers have always used, but that we have been singularly unsuccessful as a group in conveying to the rest of the industry. We've given away bits and pieces of this knowledge...but we've never organized and systematized the principles of building domain logic. This book is important."" --Kyle Brown, author of Enterprise Java(TM) Programming with IBM(R) WebSphere(R)  The software development community widely acknowledges that domain modeling is central to software design. Through domain models, software developers are able to express rich functionality and translate it into a software implementation that truly serves the needs of its users. But despite its obvious importance, there are few practical resources that explain how to incorporate effective domain modeling into the software development process.  Domain-Driven Design fills that need. This is not a book about specific technologies. It offers readers a systematic approach to domain-driven design, presenting an extensive set of design best practices, experience-based techniques, and fundamental principles that facilitate the development of software projects facing complex domains. Intertwining design and development practice, this book incorporates numerous examples based on actual projects to illustrate the application of domain-driven design to real-world software development.  Readers learn how to use a domain model to make a complex development effort more focused and dynamic. A core of best practices and standard patterns provides a common language for the development team. A shift in emphasis--refactoring not just the code but the model underlying the code--in combination with the frequent iterations of Agile development leads to deeper insight into domains and enhanced communication between domain expert and programmer. Domain-Driven Design then builds on this foundation, and addresses modeling and design for complex systems and larger organizations.Specific topics covered include:   Getting all team members to speak the same language Connecting model and implementation more deeply Sharpening key distinctions in a model Managing the lifecycle of a domain object  Writing domain code that is safe to combine in elaborate ways Making complex code obvious and predictable Formulating a domain vision statement  Distilling the core of a complex domain Digging out implicit concepts needed in the model  Applying analysis patterns  Relating design patterns to the model  Maintaining model integrity in a large system Dealing with coexisting models on the same project Organizing systems with large-scale structures Recognizing and responding to modeling breakthroughs  With this book in hand, object-oriented developers, system analysts, and designers will have the guidance they need to organize and focus their work, create rich and useful domain models, and leverage those models into quality, long-lasting software implementations."
9781484260227,"Map concepts and ideas in domain-driven design (DDD) and transpose them into clean, testable, and quality code that is effective alongside the Laravel framework. This book teaches you how to implement the concepts and patterns present in DDD in the real world as a complete web application. With these tactics and concepts in place, you'll engage in a variety of example applications, built from the ground up, and taken directly from real-world domains. Begin by reviewing foundational stepping stones (with small, manageable examples to show proof of concepts as well as illustrations to conceptualize the more complex topics) of both DDD and Laravel. Specifically, such topics as entities, value objects, developing an ubiquitous language, DTOs, and knowledge discovery. Next, you will dive into some more advanced topics of DDD and use these concepts as a guide to make customizations to the default Laravel installation, giving you an understanding of why these alterations are vital to the DDD and Laravel platform. Finally, you will cover the very powerful Eloquent ORM that comes stock with Laravel and understand how it can be utilized to represent entities, handle repositories, and support domain events. Although there is a basic coverage chapter and a setup tutorial for Laravel (along with a high level intro about the components used within it), Domain-Driven Laravel is best suited to readers who have been at least exposed to the framework and have had the opportunity to tinker around with it.What You'll Learn Utilize a blazing-fast rapid development pipeline built from DDD building blocks and facilitated with LaravelImplement value objects, repositories, entities, anti-corruption layers and others using Laravel as a web frameworkApply enhanced techniques for quick prototyping of complex requirements and quality results using an iterative and focused approach Create a base framework (Laravel) that can serve as a template to start off any projectGain insight on which details are important to a project's success and how to acquire the necessary knowledge Who This Book Is ForIdeal for for frontend/backend web developers, devops engineers, Laravel framework lovers and PHP developers hoping to learn more about either Domain Driven Design or the possibilities with the Laravel framework. Those with a working knowledge of plain PHP can also gain value from reading this book. "
9780321834577,"""For software developers of all experience levels looking to improve their results, and design and implement domain-driven enterprise applications consistently with the best current state of professional practice, Implementing Domain-Driven Design will impart a treasure trove of knowledge hard won within the DDD and enterprise application architecture communities over the last couple decades."" -Randy Stafford, Architect At-Large, Oracle Coherence Product Development  ""This book is a must-read for anybody looking to put DDD into practice."" -Udi Dahan, Founder of NServiceBus   Implementing Domain-Driven Design presents a top-down approach to understanding domain-driven design (DDD) in a way that fluently connects strategic patterns to fundamental tactical programming tools. Vaughn Vernon couples guided approaches to implementation with modern architectures, highlighting the importance and value of focusing on the business domain while balancing technical considerations.  Building on Eric Evans' seminal book, Domain-Driven Design, the author presents practical DDD techniques through examples from familiar domains. Each principle is backed up by realistic Java examples-all applicable to C# developers-and all content is tied together by a single case study: the delivery of a large-scale Scrum-based SaaS system for a multitenant environment.  The author takes you far beyond ""DDD-lite"" approaches that embrace DDD solely as a technical toolset, and shows you how to fully leverage DDD's ""strategic design patterns"" using Bounded Context, Context Maps, and the Ubiquitous Language. Using these techniques and examples, you can reduce time to market and improve quality, as you build software that is more flexible, more scalable, and more tightly aligned to business goals.  Coverage includes  Getting started the right way with DDD, so you can rapidly gain value from it Using DDD within diverse architectures, including Hexagonal, SOA, REST, CQRS, Event-Driven, and Fabric/Grid-Based Appropriately designing and applying Entities-and learning when to use Value Objects instead Mastering DDD's powerful new Domain Events technique Designing Repositories for ORM, NoSQL, and other databases  "
9781680502541,"You want increased customer satisfaction, faster development cycles, and less wasted work. Domain-driven design (DDD) combined with functional programming is the innovative combo that will get you there. In this pragmatic, down-to-earth guide, you'll see how applying the core principles of functional programming can result in software designs that model real-world requirements both elegantly and concisely - often more so than an object-oriented approach. Practical examples in the open-source F# functional language, and examples from familiar business domains, show you how to apply these techniques to build software that is business-focused, flexible, and high quality. Domain-driven design is a well-established approach to designing software that ensures that domain experts and developers work together effectively to create high-quality software. This book is the first to combine DDD with techniques from statically typed functional programming. This book is perfect for newcomers to DDD or functional programming - all the techniques you need will be introduced and explained. Model a complex domain accurately using the F# type system, creating compilable code that is also readable documentation---ensuring that the code and design never get out of sync. Encode business rules in the design so that you have compile-time unit tests, and eliminate many potential bugs by making illegal states unrepresentable. Assemble a series of small, testable functions into a complete use case, and compose these individual scenarios into a large-scale design. Discover why the combination of functional programming and DDD leads naturally to service-oriented and hexagonal architectures. Finally, create a functional domain model that works with traditional databases, NoSQL, and event stores, and safely expose your domain via a website or API. Solve real problems by focusing on real-world requirements for your software. What You Need:  The code in this book is designed to be run interactively on Windows, Mac and Linux.You will need a recent version of F# (4.0 or greater), and the appropriate .NET runtime for your platform.Full installation instructions for all platforms at fsharp.org."
9781492052203,"As Python continues to grow in popularity, projects are becoming larger and more complex. Many Python developers are taking an interest in high-level software design patterns such as hexagonal/clean architecture, event-driven architecture, and the strategic patterns prescribed by domain-driven design (DDD). But translating those patterns into Python isn't always straightforward.With this hands-on guide, Harry Percival and Bob Gregory from MADE.com introduce proven architectural design patterns to help Python developers manage application complexity--and get the most value out of their test suites. Each pattern is illustrated with concrete examples in beautiful, idiomatic Python, avoiding some of the verbosity of Java and C# syntax. Patterns include: Dependency inversion and its links to ports and adapters (hexagonal/clean architecture)Domain-driven design's distinction between Entities, Value Objects, and Aggregates Repository and Unit of Work patterns for persistent storageEvents, commands, and the message busCommand-query responsibility segregation (CQRS)Event-driven architecture and reactive microservices"
9781118714706,"Methods for managing complex software construction following the practices, principles and patterns of Domain-Driven Design with code examples in C#  This book presents the philosophy of Domain-Driven Design (DDD) in a down-to-earth and practical manner for experienced developers building applications for complex domains. A focus is placed on the principles and practices of decomposing a complex problem space as well as the implementation patterns and best practices for shaping a maintainable solution space. You will learn how to build effective domain models through the use of tactical patterns and how to retain their integrity by applying the strategic patterns of DDD. Full end-to-end coding examples demonstrate techniques for integrating a decomposed and distributed solution space while coding best practices and patterns advise you on how to architect applications for maintenance and scale.  Offers a thorough introduction to the philosophy of DDD for professional developers Includes masses of code and examples of concept in action that other books have only covered theoretically Covers the patterns of CQRS, Messaging, REST, Event Sourcing and Event-Driven Architectures Also ideal for Java developers who want to better understand the implementation of DDD "
9789864343874,領域驅動設計之父的經典著作！領域模型使開發人員可以表達豐富的軟體功能需求，由此實作的軟體可以滿足使用者真正的需要，因此被公認是軟體設計的關鍵所在，其重要性顯而易見。但講述如何將領域模型用於軟體開發過程的優秀實作資料卻不多見。本書正是這個領域最著名的作品，受到眾多業界大師的讚美和推薦，廣受全球讀者好評！【名家名著 18】 　 領域驅動設計：軟體核心複雜度的解決方法 Domain-Driven Design: Tackling Complexity in the Heart of Software 『這本書應該出現在每位軟體開發人員的書架上。』（This book belongs on the shelf of every thoughtful software developer.） －－軟體大師、JUnit的創始人、XP與TDD專家 ／Kent Beck 『Eric的這本書太棒、太神奇了，他準確地告訴你如何讓軟體設計滿足你的模型需求……本書讀起來趣味無窮。Eric有許多有趣的故事，而且描述起來很有一套……它將成為軟體開發人員必讀的經典之作。』 －－GoF的《Design Patterns》的作者／Ralph Johnson  『如果你認為自己在物件導向程式設計中的投入沒有得到回報，讀了這本書你就會知道自己漏掉什麼。』 －－設計模式和敏捷軟體開發方法的先驅 ／Ward Cunningham 『Eric Evans成功證明了作為開發核心的領域模型的重要性。他搭建了一個穩固的框架，並提供一套實作技術和技巧。這裡沉澱下來的是亙古不變的智慧，在流行的方法論都淪為明日黃花之後，它依然光華璀璨。』 －－《Designing Object-Oriented User Interfaces》的作者 ／Dave Collins 『Eric完全從實戰者的角度著手，描述了通用的語言、與使用者共享模型的好處、物件生命週期的管理、深度重構的過程和結果，這是對我們這個領域的巨大貢獻。』 －－《Beyond Software Architecture》的作者 ／Luke Hohmann 『Eric成功抓住了經驗豐富的物件設計師在設計過程中會使用的那一部分……我們從未有組織地和有系統地把建立領域邏輯的原則制度化。這是一本非常重要的著作。』 －－《Enterprise Java Programming with IBM WebSphere》的作者 ／Kyle Brown 『講解DDD的書籍並不多，而這本書是當中公認最好的一本。如果您對於DDD有任何疑問，這本書將會提供最佳解答』 －－博碩文化《名家名著》總編輯／陳錦輝 
9789864348602,"『本書採用目前流行的Event Storming（事件風暴）作為教學主軸，以刊登廣告系統為範例，帶著讀者完整走過一遍套用DDD的分析、設計與實作過程。書中除了基本的Entity、Value Object、Domain Service、Factory、Aggregate、Repository、Domain Event、Application Service等DDD戰術模式的詳細實作範例與設計取捨的討論，還包含進階的CQRS以及Event Sourcing應用。對於有志實踐Event Sourcing的讀者，不可錯過本書的第10章與第11章。』 ——「搞笑談軟工」板主Teddy Chen　專文推薦   領域驅動設計與.NET Core：應用DDD原則，探索軟體核心複雜度  Tackling complexity in the heart of software by putting DDD principles into practice     為了將複雜的業務知識與需求，轉換成容易理解和維護的傑出軟體，來自世界各地的開發人員開始應用DDD原則，使用現代工具（如Event Storming、Event Sourcing和CQRS）識別並解決對的問題，為客戶提供他們真正想要的東西。本書將引導你，如何讓利害關係人也能參與你為他們精心建置的軟體。透過了解領域模型的行為驅動與時序本質，你將能夠建置更精實、更敏捷、模組化的系統，進而解決複雜的業務問題！  首先，我們將探討領域的複雜度，並學習如何捕捉領域語言的各種行為。然後，我們將說明Event Storming，並透過.NET Core 2.1（或更高版本）建立新專案。我們還會編寫一些將事件從便利貼轉移到C#的程式碼。我們也將展示如何使用aggregate處理命令並產生事件，以及逐步掌握CQRS、Event Sourcing、Bounded Context的精髓。在將領域模型轉換為可執行的C#程式碼之後，我們將使用Vue.js範例應用程式，學習一些有用的前端相關模式。此外，我們也將重構程式碼，討論事件版本和遷移的要點。  在這本書中，你將學到： ・使用Event Storming，與利害關係人一起發現並解決領域複雜度 ・如何避免領域模型的常見陷阱 ・深入探索並學習Bounded Context、Context Map等概念 ・Event Sourcing的優點和缺點 ・詳細介紹CQRS（命令查詢職責分離） ・學會使用Event Store ・學習實作投影（projection） ・將DDD應用於不同的架構風格，如REST、反應式系統、微服務   本書的最後一章，「第13章，分割系統」，是一個「線上補充章節」，讀者請至博碩文化官網，下載繁體中文翻譯PDF。   目標讀者： 適合熟悉C#和JavaScript的.NET開發人員。    下載範例程式檔案： 本書的程式碼是由GitHub託管，可點選下面圖案前往下載：   下載本書的彩色圖片： 提供您一個包含本書使用的彩色圖表的PDF檔案，可以在此下載："
9789865024871,"有效製作軟體文件 “真希望這本書20年前就出版，可以省下我很多時間” -Woody Zuill, Agile Guide與Mob Programming先驅 運用領域驅動設計(Domain-Driven Design)方法建立文件檔，於軟體開發生命週期中創造最大價值 軟體文件可以生動、動態，並在實質上幫助你創建出更好的軟體。本書為開發者、架構設計師和軟體專業工作者而寫，展示如何在設計與開發過程中建立隨之演進的文件。 透過模式解說、清晰圖示與具體範例，引領您應用良好的製作工具與自動化功能，在最低成本下大幅提升文件的價值。不論任何領域、語言或技術，您都無需在運行軟體和詳盡的高品質文件之間做取捨，讓魚與熊掌都能兼得。 ‧擷取與增強知識，讓它發揮實質效用 ‧自動建立隨著知識變化演進的文件與圖表 ‧使用開發工具重構文件 ‧利用文件改善軟體設計 ‧在原有與新環境中引入有效文件"
